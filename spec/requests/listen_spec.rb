require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/listen", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Listen. As you add validations to Listen, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      username: 'lokeshdevnani',
      content: 'Incredible #india',
      hashtags: ["india"]
    }
  }

  let(:invalid_attributes) {
    {
      # username missing
      content: 'Incredible #india',
      hashtags: ["india"]
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ListensController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "POST /listen" do
    context "with valid parameters" do
      it "returns ok and triggers all configured processors" do
        expect_proc = Proc.new do |tweet|
          expect(tweet.username).to eq('lokeshdevnani')
          expect(tweet.hashtags).to eq(['india'])
        end
        expect(HashtagProcessor).to \
          receive(:new) {|tweet| expect_proc.call(tweet)}.and_call_original

        expect(NthUserTweetProcessor).to \
          receive(:new) {|tweet| expect_proc.call(tweet)}.and_call_original

        post listen_url,
             params: { tweet: valid_attributes }, headers: valid_headers,
             as: :json

        expect(response.status).to eq(200)
        expect(response.parsed_body['ok']).to eq(true)
      end
    end

    context "with invalid parameters" do
      it "returns 422" do
        post listen_url,
             params: { tweet: invalid_attributes }, headers: valid_headers,
             as: :json
        expect(response.status).to eq(422)
        expect(response.parsed_body['error']).to eq("Username is required")
      end
    end
  end
end
